import * as path from 'path';

import { PathUtil, FsUtil, Package, EnvUtil } from '@travetto/boot';

import { AllType, AllTypeMap, node as n } from '../nodes';
import { DocNode, RenderContextShape } from '../types';

export type AllChildren = AllType;

/**
 * Render context
 */
export class RenderContext implements RenderContextShape {

  file: string;

  constructor(file: string) {
    this.file = PathUtil.resolveUnix(file);
  }

  get #repoUrl() {
    return (Package.repository?.url ?? '').replace(/[.]git$/, '');
  }

  get gitBaseUrl() {
    return `${this.#repoUrl}/tree/${EnvUtil.get('TRV_DOC_BRANCH', 'master')}`;
  }

  get travettoGitBaseUrl() {
    return this.#repoUrl.includes('travetto/travetto') ? this.gitBaseUrl : 'https://github.com/travetto/travetto/master';
  }

  get gitFolder() {
    let base = PathUtil.cwd;

    while (base && !(FsUtil.existsSync(PathUtil.resolveUnix(base, '.git')))) {
      base = path.dirname(base);
    }

    return `${this.gitBaseUrl}${PathUtil.cwd.replace(base, '')}`;
  }

  toc(root: DocNode) {
    return n.Ordered(
      ...(root as AllTypeMap['Group']).nodes
        .filter(x => x._type === 'section')
        .map(x => {
          const { title } = x as AllTypeMap['Section'];
          return n.Anchor(title, title);
        })
    );
  }

  get preamble() {
    return n.Group([
      n.Comment('This file was generated by @travetto/doc and should not be modified directly'),
      n.Text('\n'),
      n.Comment(`Please modify ${this.file.replace(PathUtil.cwd, this.gitFolder)} and execute "npx trv doc" to rebuild`),
    ]);
  }

  link(text: string, line?: number | { [key: string]: unknown, line?: number }) {
    const num = typeof line === 'number' ? line : line?.line;
    text = PathUtil.normalizeFrameworkPath(text);
    return `${text.replace(PathUtil.cwd, this.gitBaseUrl)
      .replace(/.*@travetto\//, `${this.travettoGitBaseUrl}/module/`)}${num ? `#L${num}` : ''}`;
  }

  cleanText(a?: string) {
    return a ? a.replace(/^[\n ]+|[\n ]+$/gs, '') : '';
  }

  getAnchorId(a: string) {
    return a.toLowerCase().replace(/<[^>]+>/g, ' ').replace(/[^a-z0-9]+/g, ' ').trim().replace(/ /g, '-');
  }
}
import { path } from '@travetto/manifest';

import { AllType, AllTypeMap, node as n } from '../nodes';
import { DocNode, RenderContextShape } from '../types';

export type AllChildren = AllType;

/**
 * Render context
 */
export class RenderContext implements RenderContextShape {

  file: string;
  baseUrl: string;
  travettoBaseUrl: string;
  repoRoot: string;

  constructor(file: string, repoRoot: string, baseUrl: string, travettoBaseUrl: string) {
    this.file = path.toPosix(file);
    this.baseUrl = baseUrl;
    this.repoRoot = repoRoot;
    this.travettoBaseUrl = travettoBaseUrl;
  }

  toc(root: DocNode): AllTypeMap['Ordered'] {
    return n.Ordered(
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      ...(root as AllTypeMap['Group']).nodes
        .filter(x => x._type === 'section')
        .map(x => {
          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
          const { title } = x as AllTypeMap['Section'];
          return n.Anchor(title, title);
        })
    );
  }

  get preamble(): AllTypeMap['Group'] {
    return n.Group([
      n.Comment('This file was generated by @travetto/doc and should not be modified directly'),
      n.Text('\n'),
      n.Comment(`Please modify ${this.file.replace(this.repoRoot, this.baseUrl)} and execute "npx trv doc" to rebuild`),
    ]);
  }

  link(text: string, line?: number | { [key: string]: unknown, line?: number }): string {
    const num = typeof line === 'number' ? line : line?.line;
    return `${text.replace(this.repoRoot, this.baseUrl)
      .replace(/.*@travetto\//, `${this.travettoBaseUrl}/module/`)}${num ? `#L${num}` : ''}`;
  }

  cleanText(a?: string): string {
    return a ? a.replace(/^[\n ]+|[\n ]+$/gs, '') : '';
  }

  getAnchorId(a: string): string {
    return a.toLowerCase().replace(/<[^>]+>/g, ' ').replace(/[^a-z0-9]+/g, ' ').trim().replace(/ /g, '-');
  }
}
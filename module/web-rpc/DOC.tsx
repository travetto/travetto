/** @jsxImportSource @travetto/doc */
import { d, c, DocRunUtil } from '@travetto/doc';
import { Runtime } from '@travetto/runtime';

export const text = async () => {
  await DocRunUtil.run('npx', ['trv', 'web:rpc-client', 'config'], { cwd: './doc-exec' });

  return <>
    <c.StdHeader />
    This module allows for a highly focused scenario, of supporting RPC operations within a {d.mod('Web')} application.  The module takes care of producing the appropriate handler for the RPC commands along with the ability to generate the appropriate client to be used to interact with the RPC functionality.  The generated client uses Proxy-based objects, along with {d.library('Typescript')} magic to create a dynamic client that does not rely on generating a lot of code.

    <c.Section title='CLI - web:rpc-client'>
      The library will create the RPC client in one of three flavors: fetch, fetch + node, angular.

      <c.Execution title='Command Service' cmd='trv' args={['web:rpc-client', '--help']} config={{ cwd: Runtime.workspace.path }} />
    </c.Section>

    <c.Section title='Example'>
      <c.Code title="Example Controller" src="./doc-exec/src/controller.ts" />

      This controller is a basic example of an invokable endpoint.

      <c.Config title="resources/application.yml" src="./doc-exec/resources/application.yml" />

      The configuration, while not necessary, makes it easy to consistently configure and generate the appropriate client.

      <c.Terminal title="Example Client Generation" src={`
        npx trv web:rpc-client config  
      `} />

      You can manually invoke the client generation, but once configured, it will run automatically when running the web server as well.

      <c.Code title="Example API Factory" src="./doc-exec/api-client/factory.ts" />

      The api factory relies on the type information generated by the compiler, and so this file is the only configuration needed to connect your controllers to the rpc functionality.

      <c.Code title="Example Client Usage" src="./doc-exec/ui/client.js" />

      The usage here is extremely simple, but outlines the simplicity of what is needed to make RPC requests.

    </c.Section>
  </>;
};
